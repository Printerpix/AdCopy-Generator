"""
Insight Inserter Module
Handles creation of UUIDs and insertion into Supabase.
"""

import uuid
from datetime import datetime, timezone

def generate_insight_id():
    """
    Generate a unique UUID for new insight.
    
    Returns:
        str: UUID string for new insight
    """
    return str(uuid.uuid4())

def prepare_insight_for_storage(structured_insight):
    """
    Prepare structured insight for database storage.
    
    Args:
        structured_insight (dict): Validated structured insight
    
    Returns:
        dict: Database-ready insight record (without status)
    """
    db_record = {
        'insight': structured_insight['insight'],
        'results': structured_insight['results'],  # Already JSON string from formatter
        'limitations_context': structured_insight['limitations'],
        'difference_score': structured_insight['difference_score']
        # Note: id is auto-generated by Supabase
        # Status is now handled separately in the status table
    }
    
    return db_record

def insert_single_insight(supabase_client, structured_insight):
    """
    Insert a single insight into Supabase.
    
    Args:
        supabase_client: Supabase client instance (should use service role for RLS bypass)
        structured_insight (dict): Validated structured insight
    
    Returns:
        dict: Inserted record with ID, or None if failed
    """
    try:
        db_record = prepare_insight_for_storage(structured_insight)
        
        result = supabase_client.table('insights').insert(db_record).execute()
        
        if result.data:
            inserted_record = result.data[0]
            print(f"Successfully inserted insight with ID: {inserted_record['id']}")
            return inserted_record
        else:
            print("Failed to insert insight - no data returned")
            return None
            
    except Exception as e:
        print(f"Error inserting insight: {e}")
        return None



def batch_insert_insights(supabase_client, structured_insights):
    """
    Insert multiple insights into Supabase in batch.
    Only inserts into the insights table - status records are created separately when insights are tested.
    
    Args:
        supabase_client: Supabase client instance
        structured_insights (list): List of validated structured insights
    
    Returns:
        tuple: (successful_inserts: list, failed_inserts: list)
    """
    successful_inserts = []
    failed_inserts = []
    
    # Prepare all records for batch insert
    db_records = []
    for insight in structured_insights:
        try:
            db_record = prepare_insight_for_storage(insight)
            db_records.append(db_record)
        except Exception as e:
            print(f"Error preparing insight for storage: {e}")
            failed_inserts.append(insight)
    
    # Batch insert into insights table only
    if db_records:
        try:
            result = supabase_client.table('insights').insert(db_records).execute()
            
            if result.data:
                successful_inserts = result.data
                print(f"Successfully inserted {len(successful_inserts)} insights into insights table")
                print("Note: Status records will be created when insights are moved to testing")
                    
            else:
                print("Batch insert failed - no data returned")
                failed_inserts.extend(structured_insights)
                
        except Exception as e:
            print(f"Error during batch insert: {e}")
            failed_inserts.extend(structured_insights)
    
    return successful_inserts, failed_inserts

def move_insight_to_testing(supabase_client, insight_id, product_name, region_code, status='whitelist'):
    """
    Move an insight from greylist (insights table only) to active testing (status table).
    This creates a status record for the specific product/region combination.
    
    Args:
        supabase_client: Supabase client instance
        insight_id (str): UUID of the insight
        product_name (str): Product name
        region_code (str): Region code
        status (str): Status value ('whitelist' or 'blacklist')
    
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        # Check if insight exists in insights table
        insight_check = supabase_client.table('insights').select('id').eq('id', insight_id).execute()
        
        if not insight_check.data:
            print(f"Insight {insight_id} not found in insights table")
            return False
        
        # Check if status record already exists
        existing_status = supabase_client.table('status').select('*').eq('insight_id', insight_id).eq('product_name', product_name).eq('region_code', region_code).execute()
        
        if existing_status.data:
            # Update existing record
            result = supabase_client.table('status').update({
                'status': status,
                'updated_at': datetime.now(timezone.utc).isoformat()
            }).eq('insight_id', insight_id).eq('product_name', product_name).eq('region_code', region_code).execute()
            
            if result.data:
                print(f"Updated status for insight {insight_id} to {status} for {product_name}/{region_code}")
                return True
            else:
                print(f"Failed to update existing status record for insight {insight_id}")
                return False
        else:
            # Create new status record
            status_record = {
                'insight_id': insight_id,
                'product_name': product_name,
                'region_code': region_code,
                'status': status
            }
            
            result = supabase_client.table('status').insert(status_record).execute()
            
            if result.data:
                print(f"Created new status record for insight {insight_id} to {status} for {product_name}/{region_code}")
                return True
            else:
                print(f"Failed to create status record for insight {insight_id}")
                return False
            
    except Exception as e:
        print(f"Error moving insight to testing: {e}")
        return False

def update_insight_status(supabase_client, insight_id, product_name, region_code, new_status):
    """
    Update the status of an insight for a specific product/region combination.
    This assumes the status record already exists.
    
    Args:
        supabase_client: Supabase client instance
        insight_id (str): UUID of the insight
        product_name (str): Product name
        region_code (str): Region code
        new_status (str): New status value
    
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        result = supabase_client.table('status').update({
            'status': new_status,
            'updated_at': datetime.now(timezone.utc).isoformat()
        }).eq('insight_id', insight_id).eq('product_name', product_name).eq('region_code', region_code).execute()
        
        if result.data:
            print(f"Updated status for insight {insight_id} ({product_name}/{region_code}) to {new_status}")
            return True
        else:
            print(f"Failed to update status for insight {insight_id}")
            return False
            
    except Exception as e:
        print(f"Error updating insight status: {e}")
        return False